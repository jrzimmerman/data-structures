var HashTable = function(){
  this._limit = 8;
  this._storage = LimitedArray(this._limit);
};


HashTable.prototype.insert = function(k, v){
  var i = getIndexBelowMaxForKey(k, this._limit);

  // assign var bucket to index element generated by hash
  var bucket = this._storage.get(i);
  // check if bucket exists in index element
  if ( !bucket ) {
    // create bucket
    bucket = [];
    // set bucket in storage
    this._storage.set(i, bucket);
  }
  // [[bucket]]
  // create var to check if key found
  var found = false;
  //interate over the storage
  for(var i = 0; i < bucket.length; i++) {
    // create tuple pointing bucket[i]
    var tuple = bucket[i];
    // checking if key already exists
    if( tuple[0] === k ) {
      // if tuple exists overwrite value
      tuple[1] = v;
      found = true;
      break;
    }
  }
  // if key not found
  if( !found ) {
  // create new tuple and push to storage
    bucket.push([k,v]);
  }
  // [[[k,v]]]
};

HashTable.prototype.retrieve = function(k){
  var i = getIndexBelowMaxForKey(k, this._limit);

  var bucket = this._storage.get(i);
  // check if bucket exists in index element
  if ( !bucket ) {
    return null;
  }
 
  //interate over the storage
  for(var i = 0; i < bucket.length; i++) {
    // create tuple pointing bucket[i]
    var tuple = bucket[i];
    // if key exists
    if(tuple[0] === k) {
      // return value;
      return tuple[1];
    }
  }
  return null;
};

HashTable.prototype.remove = function(k){
  var i = getIndexBelowMaxForKey(k, this._limit);

  var bucket = this._storage.get(i);
  // check if bucket exists in index element
  if ( !bucket ) {
    return null;
  }
 
  //interate over the storage
  for(var i = 0; i < bucket.length; i++) {
    // create tuple pointing bucket[i]
    var tuple = bucket[i];
    // if key exists
    if(tuple[0] === k) {
      // splice out tuple
      bucket.splice(i, 1);
      return tuple[1];
    }
  }
  return null;  
};



/*
 * Complexity: What is the time complexity of the above functions?
 */
